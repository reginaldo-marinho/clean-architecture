// <auto-generated />
using CleanArchMvc.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CleanArchMvc.Infra.data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CleanArchMvc.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("PrimaryKey_CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CleanArchMvc.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Descrition")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id")
                        .HasName("PrimaryKey_ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Descrition = "Refrigerante Coca Cola 200ml",
                            Image = "",
                            Name = "Coca Cola",
                            Price = 4.77m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Descrition = "Refrigerante Pepsi 200ml",
                            Image = "",
                            Name = "Pepsi",
                            Price = 3.8m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Descrition = "Refrigerante Fanta Laranja 200ml",
                            Image = "",
                            Name = "Fanta Laranja",
                            Price = 4.77m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Descrition = "Coxinha 50g",
                            Image = "",
                            Name = "Coxinha",
                            Price = 5m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Descrition = "Kibe 100g",
                            Image = "",
                            Name = "Kibe",
                            Price = 4.40m
                        });
                });

            modelBuilder.Entity("CleanArchMvc.Domain.Product", b =>
                {
                    b.HasOne("CleanArchMvc.Domain.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CleanArchMvc.Domain.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
